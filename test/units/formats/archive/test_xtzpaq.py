from ... import TestUnitBase


class TestZPAQExtractor(TestUnitBase):

    def test_hedgehog_sample(self):
        data = self.download_sample('1c33eef0d22dc54bb2a41af485070612cd4579529e31b63be2141c4be9183eb6')
        test = data | self.load_pipeline('xtzpaq | pestrip | dnstr [| iffp url ]') | str
        self.assertEqual(test, 'https'':''//''www.mediafire''.''com/file/vgvujtm9ke2lj1c/Gnwwcgocwzl.wav/file')

    def test_high_compression(self):
        data = bytes.fromhex(
            '376B5374A03183D38CB228B0D37A50510201070000000000000000016A444332303233313132303133323334326330303030'
            '3030303030310038206A444301000000000009007E0100000000000000000000FDE4A75593815DFB651DA52CACC50AA249F5'
            'BFA209FF376B5374A03183D38CB228B0D37A50510101FF000910000017030E080E000209FF0305080B03080E04080E05080E'
            '06080E07080E08080E09041214030D080E0C030D080E0E030E080E100708001218FF0710001318FF0608131218FF09131420'
            'FF0600151418FF00126887FF587245AFDF8F41AFFFE71A2F0A5F004697148501703F035F00345F004A46193B705F02345F03'
            '345F034A46193B0970193B0970193B0970193B0970193B0970193B0970193B093B705F0B4697188501705F0C3442AF013C4A'
            '09443C5F0C4A46193B705F0E3442A7033C4A0909443C5F0E4A46193B705F103442AF033C4A090909443C5F104A46193B705F'
            '13344A04CF0884CF08705F15344A04CF088409CF0884D705CF08703800016A44433230323331313230313332333432643030'
            '3030303030303031003630206A4443010000FF5ED722E63B9A4BA3BF61DC39E5221F4FEE3742D2612CB9EDC592C67DCCFB59'
            '0BAB4A7738D92BA431CD00000000FD846EBB0708F9CB58C5B8C590B5DDCC4FDFF70C74FF376B5374A03183D38CB228B0D37A'
            '50510201070000000000000000016A444332303233313132303133323334326830303030303030303031003238206A444301'
            '00000000001D007E01000022C6C2A935FA401606E02B860E6A011AC9827F173000000000000000FDE3482D22E39B1AE1FD8D'
            '3ABFDF23BD854E7DC753FF376B5374A03183D38CB228B0D37A505102010E00091000140000126887FF58723800016A444332'
            '303233313132303133323334326930303030303030303031003334206A444301000000000155012E01EFFF2F0D040C141C37'
            '0137023703370438CB8250470883580701DF002F334701370242AF03EF002F1E02CF03370342D702500F03AF0781370342D7'
            '0350438F0558470137013F0A42D702501A1A470337010701DF012F3D43EF022F3842AF01DF012F1542D701500F0242AF0181'
            '81370242D701501A1A3F1A42D701500702CF024842AF0381370242D702501A1A1A470237013FBD0701DF022F390703EB2734'
            '4237064337070F034701C95802AA83580F04418B501F0243EF002F081A45601109393FF341370407060F03D1500707895804'
            '37010701DF032F2B43EF012F2642AF01DF012F1442D701500F02AF018181370242D701501A1A3F0942D701501A470437013F'
            'CF0701DF042F2243EF072F1D0F044260390941370442D70850438F08580702023702DF002F03043701380054877C8D95CD4C'
            '020080AE6C8ECE850E8F0EA0000000E00E04000020000000200000000000000000FD524B7814837A65426CEFE82031F8503A'
            'F61E5F45FF')
        self.assertEqual(data | self.load() | str, 'The binary refinery refines the finest binaries!')

    def test_streaming_archive(self):
        data = bytes.fromhex(
            '376B5374A03183D38CB228B0D37A505102010E00091000000000126887FF58723800016F746865722E747874003133203230'
            '3233313132303134323634342077333200000000000E004920616D20726566696E65642100000000FD5F779FCD7D6BECAB58'
            '6236466AF24D68EFE80FA6FF376B5374A03183D38CB228B0D37A505102010E00091000000000126887FF5872380001746573'
            '742E74787400343820323032333131313932303333303020773332000000000031005468652062696E61727920726566696E'
            '65727920726566696E6573207468652066696E6573742062696E61726965732100000000FD22C6C2A935FA401606E02B860E'
            '6A011AC9827F17FF')
        self.assertDictEqual(
            data | self.load() | {'path': str},
            {'other.txt': 'I am refined!', 'test.txt': 'The binary refinery refines the finest binaries!'})
