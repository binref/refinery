from .. import TestUnitBase
from . import KADATH1

from refinery.units import RefineryPartialResult


class TestLZF(TestUnitBase):

    def test_simple_string_01(self):
        unit = self.load()
        data = bytes.fromhex('105468652062696E61727920726566696E65E0000802732074201B40120173748022036965732E')
        goal = B'The binary refinery refines the finest binaries.'
        self.assertEqual(data | unit | bytes, goal)

    def test_simple_string_02(self):
        unit = self.load(fast=True)
        data = B'The binary refinery refines the finest binaries.'
        goal = bytes.fromhex('105468652062696E61727920726566696E65E0000802732074201B40120173748022036965732E')
        self.assertEqual(data | -unit | bytes, goal)

    def test_empty_buffer(self):
        self.assertEqual(B'' | -self.load() | bytes, B'')

    def test_tail_byte_regression_01(self):
        data = bytes.fromhex(
            '6573743D646573742C20747970653D6E742C206D6574617661723D6D657461766172206F7220274E27290D0A0D0A2020'
            '202040636C6173736D6574686F640D0A20202020646566204F7074696F6E280D0A2020202020202020636C732C0D0A20'
            '202020202020202A617267732020203A207374722C0D0A202020202020202063686F69636573203A20456E756D2C0D0A'
            '202020202020202068656C70202020203A20556E696F6E5B6F6D69742C207374725D203D206F6D69742C0D0A20202020'
            '2020202064657374'
        )
        for j in range(20, len(data)):
            check = data[:j]
            out = check | -self.load() | self.load() | bytes
            self.assertEqual(out, check)

    def test_tail_byte_regression_02(self):
        data = b'#!/usr/bin/env python3\r\r\n# -*- coding: utf-8 -*-\r'
        self.assertEqual(data | -self.load() | self.load() | bytes, data)

    def test_kadath1(self):
        data = bytes.fromhex(
            '5A5601035E03E71F54687265652074696D65732052616E646F6C70682043617274657220647265611B6D6564206F6620746865206D617276656C6C6F'
            '757320636974792C20202E2018E0013F0377617320202705736E6174636820370861776179207768696C20130374696C6C401C0370617573201A016F'
            '6E20390665206869676820206A0F726163652061626F76652069742E2041202B05676F6C64656E6063006C2017016C7920190420626C617A203D0069'
            '803D0B73756E7365742C2077697468207C036C6C732C204C036D706C65200807636F6C6F6E6E6164400B4044016172609304627269646720AB20D303'
            '7665696E201120D60E626C652C2073696C7665722D626173601607666F756E7461696E602A0C707269736D617469632073707220D420800A62726F61'
            '64207371756172204E4061047065726675412F0267617220BAA0770277696420A900742125017473406B0A6368696E6720626574776520DE0664656C'
            '6963617421412020804608626C6F73736F6D2D6C20BB036E207572208140160469766F72792048026174752028208001676C219D404B04726F77733B'
            'A16721570B7374656570206E6F7274687720880420736C6F70203104636C696D62209C037469657260D30072200C03726F6F66805E216D20C001616B'
            '2014016761210F21C92117026F75724061036C697474205C026C616E2017203A05677261737379216200624029032E204974217E2047022066652142'
            '4021419E02676F642097201402616E66212440160173752124026E616C20EE02756D704111407B0061209C02617368202002696D6D20B7201F056379'
            '6D62616C205A014D7920CF20F8016875208722210175744207206C006322880064203F601240640162752011087320756E766973697420C7006DA1C1'
            '208340640073C2D60373746F6F216622DC01746820BE2043201E08657870656374616E74414202746861226B02616C7521B7218521190261726120AE'
            '2018006520C80A737765707420757020746F22C1006D40150920706F69676E616E6379604D0373757370220160F30B616C6D6F73742D76616E697342'
            '81016D6520E3233D6035209E402321F2405C216BA235401C026D61642201201302206E652037206C01706C632700674035007740A3016F6E200F0068'
            '2287006123290177652236201E203E006D2008016E74410E6032012E00'
        )
        out = data | self.load() | str
        self.assertEqual(out, KADATH1)

    def test_cthulu(self):
        data = self.download_sample('2b883c6b5195deb7d72a2b54aec245f1edfbb879d4c492f159ce7ccc51cc5e38')
        unit = self.load()
        out = data | unit | bytearray
        self.assertTrue(out.endswith(b'"Tekeli-li! Tekeli-li!"'))
        data = data + b'JUNKSTUFF'
        with self.assertRaises(RefineryPartialResult) as context:
            data | self.load() | bytearray
        self.assertEqual(context.exception.partial, out)
