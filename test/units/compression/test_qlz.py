from .. import TestUnitBase


class TestQLZ(TestUnitBase):

    def test_decompress_01(self):
        unit = self.load()
        data = bytes.fromhex(
            '6F5F01000000040000000003806FB76ECBC9E19C8E41EF586AF7CA4F0E037E040003370400146201820728EE6465689A'
            '4F570830008005BE0D831E0400F1212E2463FFE78A832A3000833204001F9C2801C4081BCAE85C2EB0DE82F902E30000'
            '8080FAA895BE5C60DF2E8507E2DD32378D66E35D667F33AB881608861DD2559E64F702040890341604A99143CC070B57'
            'DF16047FAC9F2319A261DA160448B97BF9EA74D2C416041DD5408000810EB99458FEB716047ABC481AC6B9E07A1604FF'
            'D9DBDE17EBA49F160414EE53D4C97C040810A0037B16044DBD7832BCFBD9A1160420D81AB76104BA62160433F47DCA02'
            'AF75EE160488800001820963E00DC9328C1604E2E1D9C0054597D216046814480EE688CFC716040A101F3FCC08100080'
            '5C1883160446CB7AC61F9C1E71160458D9F2CF442BD7AC691BF169A3BBFF5D8A5540800080D50E09C385281608904521'
            '5CBAEF7A19160441EF586AF7CA4F0E00'
        )
        goal = bytes.fromhex(
            '6FB76ECBC9E19C8E41EF586AF7CA4F0E41EF586AF7CA4F0E41EF586AF7CA4F0E41EF586AF7CA4F0E41EF586AF7CA4F0E'
            '41EF586AF7CA4F0E41EF586AF7CA4F0E41EF586AF7CA4F0E41EF586AF7CA4F0E41EF586AF7CA4F0E41EF586AF7CA4F0E'
            '41EF586AF7CA4F0E41EF586AF7CA4F0E41EF586AF7CA4F0E41EF586AF7CA4F0E41EF586AF7CA4F0E41EF586AF7CA4F0E'
            '41EF586AF7CA4F0E41EF586AF7CA4F0E41EF586AF7CA4F0E41EF586AF7CA4F0E41EF586AF7CA4F0E41EF586AF7CA4F0E'
            '41EF586AF7CA4F0E41EF586AF7CA4F0E41EF586AF7CA4F0E41EF586AF7CA4F0E41EF586AF7CA4F0E41EF586AF7CA4F0E'
            '41EF586AF7CA4F0E41EF586AF7CA4F0E41EF586AF7CA4F0E41EF586AF7CA4F0E41EF586AF7CA4F0E41EF586AF7CA4F0E'
            '41EF586AF7CA4F0E41EF586AF7CA4F0E41EF586AF7CA4F0E41EF586AF7CA4F0E41EF586AF7CA4F0E41EF586AF7CA4F0E'
            '41EF586AF7CA4F0E41EF586AF7CA4F0E41EF586AF7CA4F0E41EF586AF7CA4F0E41EF586AF7CA4F0E41EF586AF7CA4F0E'
            '146201820728EE6465689A4F5705BE0D65689A4F5705BE0D65689A4F5705BE0D65689A4F5705BE0D65689A4F5705BE0D'
            '65689A4F5705BE0D65689A4F5705BE0D65689A4F5705BE0D65689A4F5705BE0DF1212E2463FFE78A41EF586AF7CA4F0E'
            '146201820728EE6465689A4F5705BE0D65689A4F5705BE0D65689A4F5705BE0D65689A4F5705BE0D65689A4F5705BE0D'
            '65689A4F5705BE0D65689A4F5705BE0D65689A4F5705BE0D65689A4F5705BE0D65689A4F5705BE0D65689A4F5705BE0D'
            '65689A4F5705BE0D65689A4F5705BE0D65689A4F5705BE0D65689A4F5705BE0D65689A4F5705BE0D65689A4F5705BE0D'
            '65689A4F5705BE0D65689A4F5705BE0D65689A4F5705BE0D65689A4F5705BE0D65689A4F5705BE0D1F9C2801C4081BCA'
            'E85C2EB0DE82F902E3FAA895BE5C60DF2E8507E2DD32378D66E35D667F33AB88E85C2EB0DE82F902861DD2559E64F734'
            'E85C2EB0DE82F902A99143CC070B57DFE85C2EB0DE82F9027FAC9F2319A261DAE85C2EB0DE82F90248B97BF9EA74D2C4'
            'E85C2EB0DE82F9021DD50EB99458FEB7E85C2EB0DE82F9027ABC481AC6B9E07AE85C2EB0DE82F902FFD9DBDE17EBA49F'
            'E85C2EB0DE82F90214EE53D4C97C037BE85C2EB0DE82F9024DBD7832BCFBD9A1E85C2EB0DE82F90220D81AB76104BA62'
            'E85C2EB0DE82F90233F47DCA02AF75EEE85C2EB0DE82F902880963E00DC9328CE85C2EB0DE82F902E2E1D9C0054597D2'
            'E85C2EB0DE82F9026814480EE688CFC7E85C2EB0DE82F9020A101F3FCC5C1883E85C2EB0DE82F90246CB7AC61F9C1E71'
            'E85C2EB0DE82F90258D9F2CF442BD7AC691BF169A3BBFF5D8A55D50E09C38528E85C2EB0DE82F9029045215CBAEF7A19'
            'E85C2EB0DE82F90241EF586AF7CA4F0E'
        )
        self.assertEqual(data | unit | bytes, goal)

    def test_regression_out_of_bounds(self):
        data = self.download_sample('b124b9180a61ff302ff29acf212a2d31df4ac747b0d2f03b8be47e2e97d2f52a')
        goal = '77c7d9094f6fc139d8c00d1746de66c73c7376215cbfadcb1bd1ca66f4b978be'
        self.assertEqual(data | self.load() | self.ldu('sha256', text=True) | str, goal)
