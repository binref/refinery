from .. import TestUnitBase


class TestCarveZIP(TestUnitBase):

    def test_simple_01(self):

        data = bytes.fromhex(
            '50 4B 03 04 14 00 00 00 08 00 87 04 5C 53 55 09 C3 8C 15 00 00 00 16 00 00 00 04 00 00 00 74 65 73 74 73 CA CC 4B 2C AA 54 08 4A'
            '4D CB CC 4B 05 31 F2 93 B3 8B F5 00 50 4B 01 02 3F 00 14 00 00 00 08 00 87 04 5C 53 55 09 C3 8C 15 00 00 00 16 00 00 00 04 00 24'
            '00 00 00 00 00 00 00 20 00 00 00 00 00 00 00 74 65 73 74 0A 00 20 00 00 00 00 00 01 00 18 00 6A E0 6E 0B 83 CB D7 01 6A E0 6E 0B'
            '83 CB D7 01 32 8A 8F 08 83 CB D7 01 50 4B 05 06 00 00 00 00 01 00 01 00 56 00 00 00 37 00 00 00 00 00'
        )
        data += self.generate_random_buffer(40)
        data += B'PK\x03\x04' * 12
        data += bytes.fromhex(
            '50 4B 03 04 14 00 00 00 00 00 D2 04 5C 53 00 00 00 00 00 00 00 00 00 00 00 00 04 00 00 00 66 6F 6F 2F 50 4B 03 04 14 00 00 00 08'
            '00 D2 04 5C 53 96 7F 30 0F 09 00 00 00 19 00 00 00 08 00 00 00 66 6F 6F 2F 62 61 72 31 4B 4A 2C E2 E5 C2 46 00 00 50 4B 03 04 14'
            '00 00 00 08 00 D1 04 5C 53 87 A3 95 12 09 00 00 00 FF 00 00 00 08 00 00 00 66 6F 6F 2F 62 61 72 32 4B 4A 2C E2 E5 1A B9 04 00 50'
            '4B 03 04 14 00 00 00 08 00 CF 04 5C 53 44 E8 14 E5 09 00 00 00 37 00 00 00 08 00 00 00 66 6F 6F 2F 62 61 72 33 4B 4A 2C E2 E5 22'
            '9D 00 00 50 4B 03 04 14 00 00 00 08 00 CE 04 5C 53 20 D4 42 7E 09 00 00 00 96 00 00 00 08 00 00 00 66 6F 6F 2F 62 61 72 34 4B 4A'
            '2C E2 E5 1A 74 04 00 50 4B 03 04 14 00 00 00 00 00 CA 04 5C 53 00 00 00 00 00 00 00 00 00 00 00 00 09 00 00 00 66 6F 6F 2F 62 61'
            '7A 31 2F 50 4B 03 04 14 00 00 00 08 00 CA 04 5C 53 E8 58 D0 34 0D 00 00 00 30 01 00 00 0D 00 00 00 66 6F 6F 2F 62 61 7A 31 2F 66'
            '6C 65 70 4B CB 49 2D A0 35 E6 E5 1A 3E B6 00 00 50 4B 03 04 14 00 00 00 08 00 C6 04 5C 53 76 F0 67 C5 08 00 00 00 8C 00 00 00 0D'
            '00 00 00 66 6F 6F 2F 62 61 7A 31 2F 66 6C 6F 70 4B CB C9 2F 18 2C 18 00 50 4B 03 04 14 00 00 00 08 00 C4 04 5C 53 D8 4A 9D 3B 08'
            '00 00 00 A8 00 00 00 0D 00 00 00 66 6F 6F 2F 62 61 7A 31 2F 66 6C 75 70 4B CB 29 2D 18 0A 18 00 50 4B 03 04 14 00 00 00 00 00 C1'
            '04 5C 53 00 00 00 00 00 00 00 00 00 00 00 00 09 00 00 00 66 6F 6F 2F 62 61 7A 32 2F 50 4B 03 04 0A 00 00 00 00 00 C1 04 5C 53 6F'
            'DF B9 06 01 00 00 00 01 00 00 00 0E 00 00 00 66 6F 6F 2F 62 61 7A 32 2F 66 6C 65 6E 6B 63 50 4B 03 04 0A 00 00 00 00 00 C0 04 5C'
            '53 F9 EF BE 71 01 00 00 00 01 00 00 00 0E 00 00 00 66 6F 6F 2F 62 61 7A 32 2F 66 6C 6F 6E 6B 62 50 4B 03 04 0A 00 00 00 00 00 BC'
            '04 5C 53 43 BE B7 E8 01 00 00 00 01 00 00 00 0E 00 00 00 66 6F 6F 2F 62 61 7A 32 2F 66 6C 6F 72 70 61 50 4B 01 02 3F 00 14 00 00'
            '00 00 00 D2 04 5C 53 00 00 00 00 00 00 00 00 00 00 00 00 04 00 24 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00 66 6F 6F 2F 0A 00'
            '20 00 00 00 00 00 01 00 18 00 32 A9 B7 60 83 CB D7 01 32 A9 B7 60 83 CB D7 01 F5 D2 39 32 83 CB D7 01 50 4B 01 02 3F 00 14 00 00'
            '00 08 00 D2 04 5C 53 96 7F 30 0F 09 00 00 00 19 00 00 00 08 00 24 00 00 00 00 00 00 00 20 00 00 00 22 00 00 00 66 6F 6F 2F 62 61'
            '72 31 0A 00 20 00 00 00 00 00 01 00 18 00 93 10 B7 60 83 CB D7 01 C2 36 B7 60 83 CB D7 01 35 CD 51 33 83 CB D7 01 50 4B 01 02 3F'
            '00 14 00 00 00 08 00 D1 04 5C 53 87 A3 95 12 09 00 00 00 FF 00 00 00 08 00 24 00 00 00 00 00 00 00 20 00 00 00 51 00 00 00 66 6F'
            '6F 2F 62 61 72 32 0A 00 20 00 00 00 00 00 01 00 18 00 70 86 5D 5F 83 CB D7 01 91 AC 5D 5F 83 CB D7 01 FB F3 13 34 83 CB D7 01 50'
            '4B 01 02 3F 00 14 00 00 00 08 00 CF 04 5C 53 44 E8 14 E5 09 00 00 00 37 00 00 00 08 00 24 00 00 00 00 00 00 00 20 00 00 00 80 00'
            '00 00 66 6F 6F 2F 62 61 72 33 0A 00 20 00 00 00 00 00 01 00 18 00 E9 31 32 5D 83 CB D7 01 E9 31 32 5D 83 CB D7 01 18 DF 34 35 83'
            'CB D7 01 50 4B 01 02 3F 00 14 00 00 00 08 00 CE 04 5C 53 20 D4 42 7E 09 00 00 00 96 00 00 00 08 00 24 00 00 00 00 00 00 00 20 00'
            '00 00 AF 00 00 00 66 6F 6F 2F 62 61 72 34 0A 00 20 00 00 00 00 00 01 00 18 00 CB C9 8F 5B 83 CB D7 01 EB EF 8F 5B 83 CB D7 01 32'
            '1C 5A 36 83 CB D7 01 50 4B 01 02 3F 00 14 00 00 00 00 00 CA 04 5C 53 00 00 00 00 00 00 00 00 00 00 00 00 09 00 24 00 00 00 00 00'
            '00 00 10 00 00 00 DE 00 00 00 66 6F 6F 2F 62 61 7A 31 2F 0A 00 20 00 00 00 00 00 01 00 18 00 06 65 01 57 83 CB D7 01 06 65 01 57'
            '83 CB D7 01 D4 0A F8 37 83 CB D7 01 50 4B 01 02 3F 00 14 00 00 00 08 00 CA 04 5C 53 E8 58 D0 34 0D 00 00 00 30 01 00 00 0D 00 24'
            '00 00 00 00 00 00 00 20 00 00 00 05 01 00 00 66 6F 6F 2F 62 61 7A 31 2F 66 6C 65 70 0A 00 20 00 00 00 00 00 01 00 18 00 C6 A4 00'
            '57 83 CB D7 01 C6 A4 00 57 83 CB D7 01 67 DC 36 3D 83 CB D7 01 50 4B 01 02 3F 00 14 00 00 00 08 00 C6 04 5C 53 76 F0 67 C5 08 00'
            '00 00 8C 00 00 00 0D 00 24 00 00 00 00 00 00 00 20 00 00 00 3D 01 00 00 66 6F 6F 2F 62 61 7A 31 2F 66 6C 6F 70 0A 00 20 00 00 00'
            '00 00 01 00 18 00 F0 27 69 52 83 CB D7 01 33 4E 69 52 83 CB D7 01 EB 59 E2 3E 83 CB D7 01 50 4B 01 02 3F 00 14 00 00 00 08 00 C4'
            '04 5C 53 D8 4A 9D 3B 08 00 00 00 A8 00 00 00 0D 00 24 00 00 00 00 00 00 00 20 00 00 00 70 01 00 00 66 6F 6F 2F 62 61 7A 31 2F 66'
            '6C 75 70 0A 00 20 00 00 00 00 00 01 00 18 00 FB 72 57 50 83 CB D7 01 FB 72 57 50 83 CB D7 01 0F A3 E6 41 83 CB D7 01 50 4B 01 02'
            '3F 00 14 00 00 00 00 00 C1 04 5C 53 00 00 00 00 00 00 00 00 00 00 00 00 09 00 24 00 00 00 00 00 00 00 10 00 00 00 A3 01 00 00 66'
            '6F 6F 2F 62 61 7A 32 2F 0A 00 20 00 00 00 00 00 01 00 18 00 49 24 D9 4B 83 CB D7 01 49 24 D9 4B 83 CB D7 01 12 AE 42 39 83 CB D7'
            '01 50 4B 01 02 3F 00 0A 00 00 00 00 00 C1 04 5C 53 6F DF B9 06 01 00 00 00 01 00 00 00 0E 00 24 00 00 00 00 00 00 00 20 00 00 00'
            'CA 01 00 00 66 6F 6F 2F 62 61 7A 32 2F 66 6C 65 6E 6B 0A 00 20 00 00 00 00 00 01 00 18 00 B1 65 D8 4B 83 CB D7 01 B1 65 D8 4B 83'
            'CB D7 01 37 79 9E 45 83 CB D7 01 50 4B 01 02 3F 00 0A 00 00 00 00 00 C0 04 5C 53 F9 EF BE 71 01 00 00 00 01 00 00 00 0E 00 24 00'
            '00 00 00 00 00 00 20 00 00 00 F7 01 00 00 66 6F 6F 2F 62 61 7A 32 2F 66 6C 6F 6E 6B 0A 00 20 00 00 00 00 00 01 00 18 00 35 91 8C'
            '4A 83 CB D7 01 35 91 8C 4A 83 CB D7 01 D1 34 3A 44 83 CB D7 01 50 4B 01 02 3F 00 0A 00 00 00 00 00 BC 04 5C 53 43 BE B7 E8 01 00'
            '00 00 01 00 00 00 0E 00 24 00 00 00 00 00 00 00 20 00 00 00 24 02 00 00 66 6F 6F 2F 62 61 7A 32 2F 66 6C 6F 72 70 0A 00 20 00 00'
            '00 00 00 01 00 18 00 A2 F9 8E 48 83 CB D7 01 A2 F9 8E 48 83 CB D7 01 8D 31 7F 47 83 CB D7 01 50 4B 05 06 00 00 00 00 0D 00 0D 00'
            'B1 04 00 00 51 02 00 00 00 00'
        )
        data += self.generate_random_buffer(210)
        data += B'PK\x03\x04' * 12
        result = list(data | self.load())
        self.assertEqual(len(result), 2)

    def test_double_loaded_zip(self):
        data = self.download_sample('e90b970c5e5ddf821d6f9f4d7d710d6dc01d59b517e8fb39da726803dc52b5ad')
        test = data | self.load_pipeline('carve-zip [| xtzip | put h var:sha256 | pf {path} ]') | {'h': str}
        self.assertDictEqual(test, {
            '91d539af85599fda3fb2fb023866b72d64adc2bb95f6153e655cc844564de02e': 'SHIPPING_MX00034900_PL_INV_pdf.exe',
            'f556ea7ba9387215b58eb077cdb2f56c27c5f8fd85493cb49ad3ba204abeb6b9': 'order.jpg',
        })
        test = data | self.load_pipeline('carve-zip [| xtzip | pf {path} ]') | [str]
        self.assertListEqual(test, ['order.jpg', 'SHIPPING_MX00034900_PL_INV_pdf.exe'])
